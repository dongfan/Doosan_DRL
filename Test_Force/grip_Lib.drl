#gripper

g_slaveid = 0
flag=0


def modbus_set_slaveid(slaveid):
	global g_slaveid
	g_slaveid = slaveid


def modbus_fc03(startaddress, cnt):
	global g_slaveid
	data = (g_slaveid).to_bytes(1, byteorder='big')
	data += (3).to_bytes(1, byteorder='big')
	data += (startaddress).to_bytes(2, byteorder='big')
	data += (cnt).to_bytes(2, byteorder='big')

	return modbus_send_make(data)


def modbus_fc06(address, value):
	global g_slaveid
	data = (g_slaveid).to_bytes(1, byteorder='big')
	data += (6).to_bytes(1, byteorder='big')
	data += (address).to_bytes(2, byteorder='big')
	data += (value).to_bytes(2, byteorder='big')

	return modbus_send_make(data)


def modbus_fc16(startaddress, cnt, valuelist):
	global g_slaveid
	data = (g_slaveid).to_bytes(1, byteorder='big')
	data += (16).to_bytes(1, byteorder='big')
	data += (startaddress).to_bytes(2, byteorder='big')
	data += (cnt).to_bytes(2, byteorder='big')
	data += (2*cnt).to_bytes(1, byteorder='big')
	for i in range(0, cnt) :
		data += (valuelist[i]).to_bytes(2, byteorder='big')

	return modbus_send_make(data)


def recv_check() :
	size, val = flange_serial_read(0.1)

	if size > 0:
		tp_log(str(val))
		return True,val
	else:
		tp_log("CRC Check Fail")
		return False, val

def gripper_move(stroke):
	flange_serial_write(modbus_fc16(282,2,[stroke,0]))
	wait(1)
